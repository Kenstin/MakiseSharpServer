// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(EfCoreContext))]
    partial class EfCoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-preview3-35497")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataLayer.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("LastBuildNumber");

                    b.Property<Guid>("RepositoryId");

                    b.Property<decimal>("WebhookId")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<string>("WebhookToken")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RepositoryId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DataLayer.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Token");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("DataLayer.Entities.RepoProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApiUri")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("RepoProviders");
                });

            modelBuilder.Entity("DataLayer.Entities.Repository", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("RepoProviderId");

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RepoProviderId");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataLayer.Entities.Notification", b =>
                {
                    b.HasOne("DataLayer.Entities.Repository", "Repository")
                        .WithMany()
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Entities.RefreshToken", b =>
                {
                    b.HasOne("DataLayer.Entities.User")
                        .WithMany("AppRefreshTokens")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DataLayer.Entities.Repository", b =>
                {
                    b.HasOne("DataLayer.Entities.RepoProvider", "RepoProvider")
                        .WithMany()
                        .HasForeignKey("RepoProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.OwnsOne("DataLayer.Entities.DiscordValues", "DiscordValues", b1 =>
                        {
                            b1.Property<Guid>("UserId");

                            b1.Property<string>("AccessToken");

                            b1.Property<decimal>("Id")
                                .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                            b1.Property<string>("RefreshToken");

                            b1.ToTable("Users");

                            b1.HasOne("DataLayer.Entities.User")
                                .WithOne("DiscordValues")
                                .HasForeignKey("DataLayer.Entities.DiscordValues", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
