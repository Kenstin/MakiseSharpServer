// <auto-generated />
using System;
using MakiseSharpServer.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MakiseSharpServer.API.Migrations
{
    [DbContext(typeof(MakiseDbContext))]
    [Migration("20190312122617_NotificationAggregateRefactorToStatusProvider")]
    partial class NotificationAggregateRefactorToStatusProvider
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview.19074.3");

            modelBuilder.Entity("MakiseSharpServer.Domain.Entities.NotificationAggregate.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<uint>("LastBuildNumber");

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.Property<string>("StatusProvider")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MakiseSharpServer.Domain.Entities.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DiscordAccessToken")
                        .IsRequired();

                    b.Property<ulong>("DiscordId");

                    b.Property<string>("DiscordRefreshToken")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DiscordId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MakiseSharpServer.Domain.Entities.NotificationAggregate.Notification", b =>
                {
                    b.OwnsOne("MakiseSharpServer.Domain.Entities.NotificationAggregate.Webhook", "Webhook", b1 =>
                        {
                            b1.Property<Guid>("NotificationId");

                            b1.Property<ulong>("ChannelId");

                            b1.Property<ulong>("GuildId");

                            b1.Property<ulong>("WebhookDiscordId");

                            b1.Property<string>("WebhookDiscordToken")
                                .IsRequired();

                            b1.HasKey("NotificationId");

                            b1.HasIndex("WebhookDiscordId")
                                .IsUnique();

                            b1.ToTable("Notifications");

                            b1.HasOne("MakiseSharpServer.Domain.Entities.NotificationAggregate.Notification")
                                .WithOne("Webhook")
                                .HasForeignKey("MakiseSharpServer.Domain.Entities.NotificationAggregate.Webhook", "NotificationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
